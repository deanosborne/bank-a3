// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.7.0.0
//      SpecFlow Generator Version:3.7.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace BankTestGherkin.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.7.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("Banking", Description=@"![Calculator](https://specflow.org/wp-content/uploads/2020/09/calculator.png)
Simple calculator for adding **two** numbers

Link to a feature: [Calculator](BankTestGherkin/Features/Banking.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**

*Transfer money between accounts (not customers)
*Bank staff only charged 50% fee
*Base fee for failed transaction = $10
*Interest rate = 4%
*Add:
	Create new accounts
	Deposit and withdraw funds
	Transfer funds between accounts
	Calculate, Add interest
	Write, read customer, account data to and from serialised binary file", SourceFile="Features\\Banking.feature", SourceLine=0)]
    public partial class BankingFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "Banking.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Banking", @"![Calculator](https://specflow.org/wp-content/uploads/2020/09/calculator.png)
Simple calculator for adding **two** numbers

Link to a feature: [Calculator](BankTestGherkin/Features/Banking.feature)
***Further read***: **[Learn more about how to generate Living Documentation](https://docs.specflow.org/projects/specflow-livingdoc/en/latest/LivingDocGenerator/Generating-Documentation.html)**

*Transfer money between accounts (not customers)
*Bank staff only charged 50% fee
*Base fee for failed transaction = $10
*Interest rate = 4%
*Add:
	Create new accounts
	Deposit and withdraw funds
	Transfer funds between accounts
	Calculate, Add interest
	Write, read customer, account data to and from serialised binary file", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void TransferAccTypes(string name, string amount, string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transfer acc types", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
  testRunner.Given(string.Format("account {0} is selected", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
  testRunner.When(string.Format("I transfer {0} to {1}", amount, type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
  testRunner.Then(string.Format("{0} is transferred to", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer acc types, Variant 0", new string[] {
                "mytag"}, SourceLine=26)]
        public virtual void TransferAccTypes_Variant0()
        {
#line 20
this.TransferAccTypes("Omni", "400", "Lifestyle", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer acc types, Variant 1", new string[] {
                "mytag"}, SourceLine=26)]
        public virtual void TransferAccTypes_Variant1()
        {
#line 20
this.TransferAccTypes("Lifestyle", "100", "Everyday", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer acc types, Variant 2", new string[] {
                "mytag"}, SourceLine=26)]
        public virtual void TransferAccTypes_Variant2()
        {
#line 20
this.TransferAccTypes("Everyday", "10", "Omni", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer acc types, Variant 3", new string[] {
                "mytag"}, SourceLine=26)]
        public virtual void TransferAccTypes_Variant3()
        {
#line 20
this.TransferAccTypes("Omni", "400", "Omni", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer acc types, Variant 4", new string[] {
                "mytag"}, SourceLine=26)]
        public virtual void TransferAccTypes_Variant4()
        {
#line 20
this.TransferAccTypes("Lifestyle", "100", "Lifestyle", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer acc types, Variant 5", new string[] {
                "mytag"}, SourceLine=26)]
        public virtual void TransferAccTypes_Variant5()
        {
#line 20
this.TransferAccTypes("Everyday", "10", "Everyday", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransferBalances(string name, string amount, string type, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("name", name);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("type", type);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transfer balances", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 35
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 36
  testRunner.Given(string.Format("account {0} is selected", name), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 37
  testRunner.When(string.Format("I transfer {0} to {1}", amount, type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 38
  testRunner.Then(string.Format("{0} is transferred to", type), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer balances, Variant 0", new string[] {
                "mytag"}, SourceLine=41)]
        public virtual void TransferBalances_Variant0()
        {
#line 35
this.TransferBalances("Omni", "400", "Lifestyle", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer balances, Variant 1", new string[] {
                "mytag"}, SourceLine=41)]
        public virtual void TransferBalances_Variant1()
        {
#line 35
this.TransferBalances("Lifestyle", "100", "Everyday", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer balances, Variant 2", new string[] {
                "mytag"}, SourceLine=41)]
        public virtual void TransferBalances_Variant2()
        {
#line 35
this.TransferBalances("Everyday", "10", "Omni", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer balances, Variant 3", new string[] {
                "mytag"}, SourceLine=41)]
        public virtual void TransferBalances_Variant3()
        {
#line 35
this.TransferBalances("Omni", "0", "Everyday", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer balances, Variant 4", new string[] {
                "mytag"}, SourceLine=41)]
        public virtual void TransferBalances_Variant4()
        {
#line 35
this.TransferBalances("Lifestyle", "0", "Omni", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer balances, Variant 5", new string[] {
                "mytag"}, SourceLine=41)]
        public virtual void TransferBalances_Variant5()
        {
#line 35
this.TransferBalances("Everyday", "0", "Lifestyle", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransferOverdrafts(string staff, string amount, string balance, string fee, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("staff", staff);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("balance", balance);
            argumentsOfScenario.Add("fee", fee);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transfer overdrafts", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 50
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 51
  testRunner.Given(string.Format("customer is not {0}", staff), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 52
  testRunner.When(string.Format("{0} transferred is more than {1}", amount, balance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
  testRunner.Then(string.Format("the account is charged a {0}", fee), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
  testRunner.And(string.Format("the {0} should be withdrawn from the {1}", fee, balance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer overdrafts, Variant 0", new string[] {
                "mytag"}, SourceLine=57)]
        public virtual void TransferOverdrafts_Variant0()
        {
#line 50
this.TransferOverdrafts("false", "100", "0", "5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer overdrafts, Variant 1", new string[] {
                "mytag"}, SourceLine=57)]
        public virtual void TransferOverdrafts_Variant1()
        {
#line 50
this.TransferOverdrafts("false", "3", "4", "5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer overdrafts, Variant 2", new string[] {
                "mytag"}, SourceLine=57)]
        public virtual void TransferOverdrafts_Variant2()
        {
#line 50
this.TransferOverdrafts("false", "5", "5", "10", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer overdrafts, Variant 3", new string[] {
                "mytag"}, SourceLine=57)]
        public virtual void TransferOverdrafts_Variant3()
        {
#line 50
this.TransferOverdrafts("false", "44", "901", "5", ((string[])(null)));
#line hidden
        }
        
        public virtual void TransferStaffFees(string staff, string amount, string balance, string fee, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "mytag"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("staff", staff);
            argumentsOfScenario.Add("amount", amount);
            argumentsOfScenario.Add("balance", balance);
            argumentsOfScenario.Add("fee", fee);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Transfer staff fees", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 64
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 65
  testRunner.Given(string.Format("customer is {0}", staff), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 66
  testRunner.When(string.Format("{0} transferred is more than {1}", amount, balance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
  testRunner.Then(string.Format("the account is charged a {0}", fee), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
  testRunner.And(string.Format("the {0} should be withdrawn from the {1}", fee, balance), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer staff fees, Variant 0", new string[] {
                "mytag"}, SourceLine=71)]
        public virtual void TransferStaffFees_Variant0()
        {
#line 64
this.TransferStaffFees("true", "100", "0", "5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer staff fees, Variant 1", new string[] {
                "mytag"}, SourceLine=71)]
        public virtual void TransferStaffFees_Variant1()
        {
#line 64
this.TransferStaffFees("true", "3", "4", "5", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer staff fees, Variant 2", new string[] {
                "mytag"}, SourceLine=71)]
        public virtual void TransferStaffFees_Variant2()
        {
#line 64
this.TransferStaffFees("true", "5", "5", "10", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Transfer staff fees, Variant 3", new string[] {
                "mytag"}, SourceLine=71)]
        public virtual void TransferStaffFees_Variant3()
        {
#line 64
this.TransferStaffFees("true", "44", "901", "5", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
